false % "describe" where 
{
  pop % already defined, assuming it is the right one
}
{
  dict begin % stack a context dictionary

  "root_content"
  mark
    "type" "root"
    "name" "root"
    "content" []
  dicttomark
  def
  "content_stack" [ root_content ] def

  "check_name_and_block" {
    dup type "blocktype" neq { typecheck } if
    1 index type "stringtype" neq { typecheck } if
  } bind def

  "get_current_content" {
    content_stack
    dup length 1 sub get
    "content" get
  } bind def

  % Not def to keep it as a bound block (used later)
  currentdict "it" {
    check_name_and_block
    get_current_content
    mark
      "type" "it"
      "name" 7 -1 roll
      "block" 8 -1 roll
    dicttomark
    apush
  } bind set

  % describe
  {
    check_name_and_block
    mark
      "type" "describe"
      "name" 6 -1 roll
      "content" []
    dicttomark
    get_current_content 1 index apush
    content_stack exch apush % stack content

    mark
      "it" it % will become a proc
    dicttomark
    begin % stack context
    {
      true exch if % execute block
    }
    {
      end % unstack context
      content_stack apop pop % unstack content
    }
    finally
  } bind

  "run_it" {
    pop "run_it" print
  } bind def

  "for_each_content" {
    dup length
    0
    % array length index
    {
      dup 2 index gte { break } if
      2 index % array
      1 index % index
      get % array's element

      dup "type" get
      "describe" eq
      {
        dup "name" get ["ðŸ“¦ " 3 -1 roll] join print
        "content" get
        for_each_content
      }
      {
        run_it
      }
      ifelse

      1 add % next index
    } loop
    pop pop pop
  } bind def

  % run_all_tests
  {
    root_content
    "content" get
    for_each_content
  } bind

  end % unstack context dictionary

  "run_all_tests" exch def
  "describe" exch def
}
ifelse
